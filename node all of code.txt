main index:-

const express = require('express')
const app = express()

// mongoose 
require('dotenv').config()
require('./config/db')
const bodyParser = require("body-parser");

// link file 
const routes = require('./routes/index')

// Swagger 
const swaggerJson = require('./swagger/swagger.json')
const swaggerUi = require("swagger-ui-express");
app.use('/swagger', swaggerUi.serve, swaggerUi.setup(swaggerJson));

// For EJS
const viewRoutes = require('./view/routes/index')
const path = require("path")
app.set('views', path.join(__dirname, 'view/pages'))
app.set('view engine', 'ejs')
app.use(express.static('public'))

// image 
app.use('/data', express.static('images'))

// limit 
app.use(
    bodyParser.json({
        limit: '1024mb',
    }),
)
app.use(
    bodyParser.urlencoded({
        limit: '1024mb',
        extended: true,
    }),
)

// api routes
app.use('/api', routes)

// write process.env.PORT || 3000 because the PORT will be assigned dynamically from the server when we host the application
// for local development we will use the port 3000
const port = process.env.PORT || 4000;
app.listen(port, function () {
    console.log(`The web server has started on port ${port}`);
    console.log("New added")
    console.log(process.env.databaseUrl)
});


.....................................................................
models:- studentschema.js
"use strict";
var mongoose = require("mongoose");

var StudentSchema = new mongoose.Schema(
  {
    firstName: {
      type: String,
      default: "",
      trim: true,
    },
    lastName: {
      type: String,
      default: "",
      trim: true,
    },
    age: {
      type: Number,
      required: true,
      trim: true,
    },
    phone: {
      type: Number,
      required: true,
      trim: true,
    },
    email: {
      type: String,
      default: "",
      trim: true,
    },
    city: {
      type: String,
      default: "",
      trim: true,
    },
    password: {
      type: String,
      default: "",
      trim: true,
    },
    confrimpassword: {
      type: String,
      default: "",
      trim: true,
    },
    roles: {
      type: Array,
      trim: true,
      default: ["user"],
  }
  },
  {
    timestamps: true,
  }
);

var student = mongoose.model("student", StudentSchema);
module.exports = student;
.....................................................
config:- db.js
'use strict'
let mongoose = require('mongoose')

require('../models/studentSchema')
require('../models/userSchema')
require('../models/ItPersonSchema')

mongoose.set('debug', (collectionName, method, query, doc) => {
    console.log(`${collectionName}.${method}`, JSON.stringify(query), doc)
})
mongoose.Promise = global.Promise

mongoose.connect(process.env.databaseUrl, {
    useUnifiedTopology: true,
    useNewUrlParser: true,
})

let db = mongoose.connection
db.on('error', console.error.bind(console, 'connection failed'))

db.once('open', function () {
    console.log('Database connected successfully!')
})
......................................................................
controller:- studentcontroller.js
const mongoose = require('mongoose')
const STUDENT = mongoose.model('student')


exports.student = {
    cloneDeep: (array) => {
        return JSON.parse(JSON.stringify(array))
    },
    get: async (req, res) => {
        const studentList = await STUDENT.find({})
        return res.json({
            isSuccess: true,
            data: this.student.cloneDeep(studentList)
        })
    },
    checkValidations: (errors, req, fieldName, validationMessage, regex) => {
        if (!req.body[fieldName] && !regex) {
            errors[fieldName] = validationMessage
        }
        if (regex) {
            var regularExp = new RegExp(regex)
            if (!regularExp.test(req.body[fieldName])) {
                errors[fieldName] = validationMessage
            }
        }
        return errors
    },
    add: async (req, res) => {
        const studentList = {
            firstName: req.body.firstName,
            lastName: req.body.lastName,
            age: req.body.age,
            phone: req.body.phone,
            email: req.body.email,
            city: req.body.city,
            password: req.body.password,
            confrimpassword: req.body.confrimpassword,
            roles : req.body.roles
        }
        const isCreated = await STUDENT.create(studentList)
        if (!isCreated) {
            return res.json({
                isSuccess: false,
                message: "Failed to add student"
            })
        }
        return res.json({
            isSuccess: true,
            message: "Student addedd successfully"
        })


    },
    update: async (req, res) => {
        try {
            let studentData = await STUDENT.findOne({ _id: req.body.id })
            if (!studentData) {
                return res.json({
                    isSuccess: false,
                    message: "No data found"
                })
            }
            studentData = this.student.cloneDeep(studentData)
            const errors = {}
            if (req.body.hasOwnProperty("firstName") && !req.body.firstName) {
                errors['firstName'] = "Please enter first name"
            }
            if (req.body.hasOwnProperty("lastName") && !req.body.lastName) {
                errors['lastName'] = "Please enter last name"
            }
            if (req.body.hasOwnProperty("age") && !req.body.age) {
                errors['age'] = "Please enter age"
            }
            if (Object.keys(errors).length > 0) {
                return res.json({
                    isSuccess: false,
                    validations: errors
                })
            }
            Object.keys(studentData).forEach(item => {
                if (req.body.hasOwnProperty(item)) {
                    studentData[item] = req.body[item]
                }
            })
            const isUpdated = await STUDENT.findOneAndUpdate({
                _id: req.body.id
            }, studentData)
            if (!isUpdated) {
                return res.json({
                    isSuccess: false,
                    message: "Failed to update student"
                })
            }
            return res.json({
                isSuccess: true,
                message: "Student updated successfully"
            })
        } catch (error) {
            return res.json({
                isSuccess: false,
                message: error
            })
        }
    },
    delete: async (req, res) => {
        try {
            let studentData = await STUDENT.findOne({ _id: req.query.id })
            if (!studentData) {
                return res.json({
                    isSuccess: false,
                    message: "No data found"
                })
            }
            const isDeleted = await STUDENT.findByIdAndDelete({
                _id: req.query.id
            })
            if (!isDeleted) {
                return res.json({
                    isSuccess: false,
                    message: "Failed to delete student"
                })
            }
            return res.json({
                isSuccess: true,
                message: "Student deleted successfully"
            })
        } catch (error) {
            return res.json({
                isSuccess: false,
                message: error
            })
        }
    },
    getById : async (req,res) => {
        let studentData = await STUDENT.findOne({ _id: req.body.id })
        console.log(studentData);
        if(!studentData){
            return res.json({
                isSuccess : false,
                message : "Data not found !"
            })
        }
        return res.json({
            isSuccess : true,
            data : this.student.cloneDeep(studentData)
        })
    },
}
................................................................................
router:- index.js
const express = require('express')
const router = express.Router()
const { ensureAuthorized } = require('../middleware/auth')


const student = require('./student')
const user = require('./user')
const ItPerson = require('./ItProrson')


router.use('/student', ensureAuthorized, student)
router.use('/user', ensureAuthorized, user)
router.use('/ItPerson', ensureAuthorized, ItPerson)
module.exports = router

student.js:-

const express = require('express')
const router = express.Router()

const studentController = require('../controllers/StudentController')

router.post('/add-student', (req, res) => {
    return studentController.student.add(req, res)
})

router.get('/get-all-student', (req, res) => {
    return studentController.student.get(req,res)
})

router.post('/update-student', (req, res) => {
    return studentController.student.update(req, res)
})

router.delete('/delete-student', (req, res) => {
    return studentController.student.delete(req, res)
})

router.get('/get-student-id',(req,res) => {
    return studentController.student.getById(req,res)
})


module.exports = router
...................................................................
middleware:- auth.js

"use strict";
const jwt = require("jsonwebtoken");

const allowedUrls = [
    "/login",
];

// const adminUrls = ['/add']

const superadminUrls = ["/get-all","/add","/Upadate","/delete","/get-by-id","/add-student","/get-all-student","/update-studentt","/delete-student","/get-student-id"];
const adminUrls = ["/add","/Upadate","/delete","/add-student","/update-studen","/delete-student"]
const userUrls = ["/get-all","/add","/get-all-student","/add-student"]
const guestUrls = ["/get-all","/get-all-student"]

const ensureAuthorized = (req, res, next) => {
    if (allowedUrls.indexOf(req.path.toLowerCase()) !== -1) {
        return next();
    }
    const bearerHeader = req.headers["authorization"];
    if (
        !(typeof bearerHeader !== "undefined" && process.env.secret) ||
        !bearerHeader
    ) {
        return res.status(401).json({
            message: "Auth token not found",
            isSuccess: false,
        });
    }
    const bearer = bearerHeader.split(" ");
    const bearerToken = bearer[1];
    jwt.verify(bearerToken, process.env.secret, async function (err, decoded) {
        if (err) {
            return res.status(401).json({
                message: "Auth token not found",
                error: err,
                isSuccess: false,
            });
        } else {
            // if (!(adminUrls.indexOf(req.path.toLowerCase()) !== -1 && decoded.roles.includes('admin'))) {
            //     return res.status(401).json({
            //         message: "You are not allowed to access this API",
            //         error: err,
            //         isSuccess: false,
            //     });
            // }
            // req.user = decoded;
            // next();
            if((superadminUrls.indexOf(req.path.toLowerCase()) !== -1 && decoded.roles.includes('SuperAdmin'))){
                req.user = decoded;
                next();
            }
            else if((adminUrls.indexOf(req.path.toLowerCase()) !== -1 && decoded.roles.includes('admin'))){
                req.user = decoded;
                next();
            }
            else if((userUrls.indexOf(req.path.toLowerCase()) !== -1 && decoded.roles.includes('user'))){
                req.user = decoded;
                next();
            }
            else if((guestUrls.indexOf(req.path.toLowerCase()) !== -1 && decoded.roles.includes('guest'))){
                req.user = decoded;
                next();
            }
            else{
                return res.status(401).json({
                    message: "You have no permission to access this API",
                    error: err,
                    isSuccess: false,
                })
            }
        }
    });
};
module.exports = {
    ensureAuthorized,
};
...............................................................................
.env:-
databaseUrl=mongodb+srv://Bhautik:Bh%40utik%401999@cluster0.i8wq3.mongodb.net/RolesUser?retryWrites=true&w=majority
secret = THIS IS TOP SECRET
...................................................................................
email sender:-
templates:- email.html
email template
........
controller:-
Filepath: () => {
        const baseDirectory = __dirname;
        const splitDir = baseDirectory.split('\\');
        splitDir.pop();
        const path = splitDir.join('/') + '/templates/';

         return path
    }
.......
const folderpath = this.student.Filepath()
let mailBody = fs.readFileSync(`${folderpath}/RagistionTemplate.html`,'utf8');
        mailBody = mailBody.replace('##FristName##', studentList.firstName);
        mailBody = mailBody.replace('##LastName##', studentList.lastName);
        mailBody = mailBody.replace('##PhoneNumber##', studentList.phone);
        mailBody = mailBody.replace('##Name##', studentList.UserName);
        mailBody = mailBody.replace('##PassWorld##', studentList.password);
        mailBody = mailBody.replace('##Email##', studentList.email);
const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: 'testingproject90@gmail.com',
                pass: 'Testing@123',
            },
        });
        const mailOptions = {
            from: 'bhautikmerndevelopers@gmail.com',
            to: 'bhautikmerndevelopers@gmail.com',
            subject: "Test Email",
            html: mailBody,
        };
        transporter.sendMail(mailOptions, function (error, info) {
            if (error) {
                return res.json({
                    isSuccess: false,
                    message: error
                })
            } else {
                return res.json({
                    isSuccess: true,
                    message: "Email send successfully"
                })
            }
        })